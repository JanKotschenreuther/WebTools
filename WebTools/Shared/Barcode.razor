@using SkiaSharp
@using SkiaSharp.Views.Blazor
@using ZXing
@using ZXing.SkiaSharp

<SKCanvasView @ref="_canvasView" OnPaintSurface="PaintSurface" width="@Width" height="@Height"></SKCanvasView>

@code {
    private SKCanvasView? _canvasView;

    [Parameter]
    public string TextToEncode { get; set; } = String.Empty;
    [Parameter]
    public BarcodeFormat Format { get; set; }
    [Parameter]
    public int Width { get; set; } = 200;
    [Parameter]
    public int Height { get; set; } = 200;

    protected override async Task OnParametersSetAsync()
    {
        //this._canvasView?.Invalidate();
        await base.OnParametersSetAsync();
    }

    public void PaintSurface(SKPaintSurfaceEventArgs e)
    {
        if (String.IsNullOrWhiteSpace(this.TextToEncode))
        {
            return;
        }

        var barcodeWriter = new BarcodeWriter();
        barcodeWriter.Format = BarcodeFormat.QR_CODE;
        barcodeWriter.Options.Width = Width;
        barcodeWriter.Options.Height = Height;

        var bitMatrix = barcodeWriter.Encode(TextToEncode);
        var bitmap = barcodeWriter.Renderer.Render(bitMatrix, barcodeWriter.Format, TextToEncode);

        var canvas = e.Surface.Canvas;
        canvas.DrawBitmap(bitmap, new SKPoint(0, 0));
    }

    public void Rerender()
    {
        this._canvasView?.Invalidate();
    }
}
