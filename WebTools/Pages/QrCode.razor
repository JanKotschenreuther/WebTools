@page "/qrcode"
@using SkiaSharp.Views.Blazor
@using SkiaSharp;
@using ZXing;
@using ZXing.SkiaSharp;

<PageTitle>QR-Code</PageTitle>
<h3>QR-Code</h3>
<hr/>

<div>
    <div class="form-group">
        <label class="fw-bold">Clear Text</label>
        <InputTextArea @bind-Value="_clearText" class="form-control" placeholder="Clear Text" rows="5"></InputTextArea>
    </div>
    <div class="row">
        <div class="col-auto my-1">
            <button @onclick="Encode" class="btn btn-primary">Encode</button>
        </div>
        <div class="form-group col my-1">
            <input type="range" name="qrCodeSize" on @bind="_qrCodeSize" @oninput="SetSize" min="100" max="1000" step="50" />
            <label for="qrCodeSize">@_qrCodeSize px</label>
        </div>
    </div>
    <div>
        <Barcode @ref="_barcode" TextToEncode="@_clearText" Format="BarcodeFormat.QR_CODE" Height="@_qrCodeSize" Width="@_qrCodeSize"></Barcode>
    </div>
    <div class="form-group">
        <label class="fw-bold">Decoded Text</label>
        <InputTextArea @bind-Value="_decodedText" class="form-control" placeholder="Decoded Text" rows="5"></InputTextArea>
    </div>
    <div class="row">
        <label class="fw-bold">QR Code .png file</label>
        <InputFile OnChange="FileChangeAsync" class="form-control-file"></InputFile>
    </div>
    <div>
        <SKCanvasView @ref="_canvasView" OnPaintSurface="PaintSurface" width="@(_bitmap?.Width ?? 0)" height="@(_bitmap?.Height ?? 0)"></SKCanvasView>
    </div>
</div>

@code {
    private Barcode? _barcode;
    private string _clearText = String.Empty;
    private int _qrCodeSize = 400;

    private SKCanvasView? _canvasView;
    private SKBitmap? _bitmap;
    private string _decodedText = String.Empty;

    private void SetSize(ChangeEventArgs e)
    {
        _qrCodeSize = Convert.ToInt32(e.Value);
    }

    private void Encode()
    {
        this._barcode?.Rerender();
    }

    private async Task FileChangeAsync(InputFileChangeEventArgs e)
    {
        if (e.FileCount > 1)
        {
            Console.WriteLine("To many files selected!");
            return;
        }

        var allowedContentType = "image/png";
        if (e.File.ContentType != allowedContentType)
        {
            Console.WriteLine($"File ContentType '{e.File.ContentType}' not supported! Pick an image of ContentType '{allowedContentType}'");
            return;
        }

        if (_bitmap != null)
        {
            _bitmap.Dispose();
            _bitmap = null;
        }

        using var stream = e.File.OpenReadStream();
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        var byteArray = memoryStream.ToArray();

        this._bitmap = SKBitmap.Decode(byteArray);
        this._canvasView?.Invalidate();

        var bitmap = this._bitmap;
        if (bitmap == null)
        {
            return;
        }

        var barcodeReader = new BarcodeReader();
        var result = barcodeReader.Decode(bitmap);
        this._decodedText = result?.Text ?? String.Empty;
    }

    public void PaintSurface(SKPaintSurfaceEventArgs e)
    {
        if (this._bitmap == null)
        {
            return;
        }

        var canvas = e.Surface.Canvas;
        canvas.Clear();
        canvas.DrawBitmap(this._bitmap, new SKPoint(0, 0));
    }
}